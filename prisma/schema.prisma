datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  password      String?
  Comment       Comment[]
  responses     Response[]
  submissions   Submission[]

  @@map("users")
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  quizzes   Quiz[]

  @@index([categoryId])
  @@index([planId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model GCPData {
  id            String       @id @default(cuid())
  urlExpiryDate DateTime
  blobName      String
  assetId       String
  Attachment    Attachment[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gcpData   GCPData? @relation(fields: [gCPDataId], references: [id])
  gCPDataId String?

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  message   String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([userId])
}

model Quiz {
  id                String  @id @default(uuid())
  title             String
  passingPercentage Int     @default(100)
  position          Int
  isPublished       Boolean @default(false)
  description       String?
  courseId          String
  course            Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  questions Question[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]

  @@map("quizzes")
}

model Question {
  id          String  @id @default(uuid())
  description String?
  title       String
  position    Int
  isPublished Boolean @default(false)

  quizId    String
  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  responses Response[]

  @@map("questions")
}

model Option {
  id          String  @id @default(uuid())
  description String?
  title       String
  isAnswer    Boolean @default(false)
  position    Int

  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses  Response[]

  @@map("options")
}

model Response {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  option   Option @relation(fields: [optionId], references: [id])
  optionId String

  @@unique([userId, questionId])
  @@map("responses")
}

model Submission {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}
