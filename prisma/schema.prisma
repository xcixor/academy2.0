datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum Role {
  USER
  COACH
  STAFF
  ADMIN
}

model Profile {
  id          String    @id @default(cuid())
  firstName   String?
  lastName    String?
  phoneNumber String?
  dateOfBirth DateTime?
  oldEmail    String?
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTitle    String?
  bio         String?
  linkedIn    String?
}

model User {
  id            String       @id @default(uuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  password      String?
  Comment       Comment[]
  responses     Response[]
  submissions   Submission[]
  profile       Profile?

  isVerified                Boolean           @default(false)
  forgotPasswordToken       String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken               String?
  verifyTokenExpiry         DateTime?
  coachRequisites           CoachRequisites[]
  coachSessions             Session[]
  documentReview            DocumentReview[]

  @@map("users")
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Comment   Comment[]
  quizzes   Quiz[]

  notificationSent Boolean @default(false)

  @@index([categoryId])
  @@index([planId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id       String @id @default(uuid())
  title    String
  position Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gcpData   GCPData? @relation(fields: [gCPDataId], references: [id])
  gCPDataId String?

  vttFileUrl String?

  @@index([courseId])
}

model GCPData {
  id               String    @id @default(cuid())
  urlExpiryDate    DateTime
  blobName         String
  assetId          String    @unique
  assetName        String
  assetType        String
  validityDuration Int       @default(7)
  downloadUrl      String
  chapter          Chapter[]
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

enum PurchaseStatus {
  PENDING
  COMPLETED
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  status  PurchaseStatus @default(PENDING)
  orderID String         @unique

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  message   String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([userId])
}

model Quiz {
  id                String  @id @default(uuid())
  title             String
  passingPercentage Int     @default(100)
  position          Int
  isPublished       Boolean @default(false)
  description       String?
  courseId          String
  course            Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  questions Question[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  submissions Submission[]

  @@map("quizzes")
}

model Question {
  id          String  @id @default(uuid())
  description String?
  title       String
  position    Int
  isPublished Boolean @default(false)

  quizId    String
  quiz      Quiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]
  responses Response[]

  @@map("questions")
}

model Option {
  id          String  @id @default(uuid())
  description String?
  title       String
  isAnswer    Boolean @default(false)
  position    Int

  questionId String
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  responses  Response[]

  @@map("options")
}

model Response {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  option   Option @relation(fields: [optionId], references: [id])
  optionId String

  @@unique([userId, questionId])
  @@map("responses")
}

model Submission {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}

enum NOTIFICATION_TYPE {
  INFO
  WARNING
  SUCCESS
  ERROR
}

model Notification {
  id String @id @default(uuid())

  creatorId   String
  recepientId String
  type        NOTIFICATION_TYPE
  title       String?
  message     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRead    Boolean  @default(false)
}

model ClientCoach {
  id          String  @id @default(uuid())
  isConfirmed Boolean @default(false)
  coachId     String
  clientId    String
}

model CoachRequisites {
  id          String  @id @default(uuid())
  coachId     String  @unique
  coach       User    @relation(fields: [coachId], references: [id], onDelete: Cascade)
  calendlyURL String?
}

model Session {
  id          String  @id @default(uuid())
  title       String?
  description String?
  price       Int?

  coachId  String
  coach    User   @relation(fields: [coachId], references: [id], onDelete: Cascade)
  clientId String

  eventURI   String?
  inviteeURI String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DocumentReviewStatus {
  PENDING
  APPROVED
  REVIEWED
}

model DocumentReview {
  id      String @id @default(uuid())
  title   String
  purpose String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: SetDefault)

  status    DocumentReviewStatus     @default(PENDING)
  coachId   String
  documents DocumentReviewDocument[]
}

model DocumentReviewDocument {
  id    String @id @default(uuid())
  title String

  ownerId String
  owner   DocumentReview @relation(fields: [ownerId], references: [id], onDelete: SetDefault)
}
